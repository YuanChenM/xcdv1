<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:mongo="http://www.springframework.org/schema/data/mongo"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
            http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool.xsd
               http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.8.xsd
        ">
    <!-- Mongo配置 <mongo:mongo id="mongo" host="127.0.0.1" port="27017"></mongo:mongo> <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate"> 
        <constructor-arg ref="mongo"/> <constructor-arg name="databaseName" value="dbtest"/> </bean> -->

    <!-- tc: not required, tomcat or other:required, junit: not required -->
    <!-- <context:load-time-weaver aspectj-weaving="on" /> -->
    <tx:annotation-driven />
    <context:annotation-config />
    <!-- properties file -->
    <bean id="propertyConfigurer" class="com.msk.core.interceptor.PropertyPlaceholderConfigurerEx">
        <property name="needEncrypt" value="false" />
        <property name="encryptItems">
            <list>
                <value>db.url</value>
                <value>db.username</value>
                <value>db.userpwd</value>
            </list>
        </property>
        <property name="locations">
            <list>
                <value>classpath:config/*.properties</value>
            </list>
        </property>
    </bean>
    <bean id="masterdataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.userpwd}" />
        <property name="defaultAutoCommit" value="false" />
        <property name="initialSize" value="2" />
        <property name="maxActive" value="10" />
        <property name="maxWait" value="60000" />
    </bean>
    <bean id="slavedataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbcReadOnly.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.userpwd}" />
        <property name="defaultAutoCommit" value="false" />
        <property name="initialSize" value="2" />
        <property name="maxActive" value="10" />
        <property name="maxWait" value="60000" />
    </bean>

    <bean id="dynamicDataSource" class="com.msk.core.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry value-ref="masterdataSource" key="masterdataSource"></entry>
                <entry value-ref="slavedataSource" key="slavedataSource"></entry>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="masterdataSource">
        </property>
    </bean>
    <!-- 业务数据源 <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" value="java:comp/env/jdbc/businessDS" 
        /> </bean> -->
    <!-- 创建查询SqlSessionFactory，同时指定数据源 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dynamicDataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <property name="mapperLocations" value="classpath*:com/msk/**/dao/sql/SqlMap-*.xml" />
    </bean>

    <!--定义事务处理类，不同的数据访问方式，事务处理类不同 比如：Hibernate操作的HibernateTransactionManager，JDBC操作的使用DataSourceTransactionManager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDataSource"></property>
    </bean>

    <!-- 声明使用注解式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- base Dao -->
    <bean class="com.msk.core.base.BaseDao" id="baseDao">
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>

	<!--
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxActive" value="${redis.maxActive}" />
        <property name="maxWait" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>

    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.pass}"/>
        <property name="poolConfig" ref="poolConfig"/>
        <property name="database" value="0"/>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
    </bean>
	-->
</beans>
