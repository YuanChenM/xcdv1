<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        ">
    <!-- properties file -->
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:config/*.properties</value>
            </list>
        </property>
    </bean>
    <bean id="propertyConfigurer" class="com.msk.core.interceptor.PropertyPlaceholderConfigurerEx">
        <property name="needEncrypt" value="false" />
        <property name="encryptItems">
            <list>
                <value>db.url</value>
                <value>db.username</value>
                <value>db.userpwd</value>
            </list>
        </property>
        <property name="properties" ref="configProperties"/>
    </bean>

    <context:component-scan base-package="com.msk" use-default-filters="false">
        <context:include-filter type="regex" expression="com.msk.*.logic.*Logic" />
        <context:include-filter type="regex" expression="com.msk.core.utils.ConfigInfo"/>
        <context:include-filter type="regex" expression="com.msk.core.utils.ConfigManager"/>
        <context:include-filter type="regex" expression="com.msk.core.utils.SpringContextUtil"/>
        <context:include-filter type="regex" expression="com.msk.common.utils.RsClientUtil"/>
    </context:component-scan>

    <tx:annotation-driven />
    <context:annotation-config />

    <bean id="masterdataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="java:comp/env/jdbc/MasterDS" />
    </bean>
    <bean id="slavedataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/jdbc/SlaveDS" />
    </bean>

    <bean id="dynamicDataSource" class="com.msk.core.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry value-ref="masterdataSource" key="masterdataSource"></entry>
                <entry value-ref="slavedataSource" key="slavedataSource"></entry>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="masterdataSource">
        </property>
    </bean>
    <!-- 业务数据源 <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> <property name="jndiName" value="java:comp/env/jdbc/businessDS" 
        /> </bean> -->
    <!-- 创建查询SqlSessionFactory，同时指定数据源 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dynamicDataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
        <property name="mapperLocations" value="classpath*:com/msk/**/dao/sql/SqlMap-*.xml" />
    </bean>

    <!--定义事务处理类，不同的数据访问方式，事务处理类不同 比如：Hibernate操作的HibernateTransactionManager，JDBC操作的使用DataSourceTransactionManager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDataSource"></property>
    </bean>

    <!-- 声明使用注解式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- Base Dao -->
    <bean class="com.msk.core.base.BaseDao" id="baseDao">
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>

</beans>
